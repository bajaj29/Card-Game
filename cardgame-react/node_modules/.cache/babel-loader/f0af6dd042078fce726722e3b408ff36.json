{"ast":null,"code":"import Axios from \"axios\";\nexport const GET_CARDS_REQUEST = 'GET_CARDS_REQUEST';\nexport const GET_CARDS_SUCCESS = 'GET_CARDS_SUCCESS';\nexport const GET_CARDS_FAILURE = 'GET_CARDS_FAILURE';\nexport const GET_RESULT_REQUEST = 'GET_RESULT_REQUEST';\nexport const GET_RESULT_SUCCESS = 'GET_RESULT_SUCCESS';\nexport const GET_RESULT_FAILURE = 'GET_RESULT_FAILURE';\nexport const ADD_IMAGES = 'ADD_IMAGES';\nexport const CLEAR_DATA = 'CLEAR_DATA';\n\nconst randomCardsRequest = () => {\n  return {\n    type: GET_CARDS_REQUEST\n  };\n};\n\nconst randomCardsSuccess = value => {\n  return {\n    type: GET_CARDS_SUCCESS,\n    payload: value\n  };\n};\n\nconst randomCardsFailure = value => {\n  return {\n    type: GET_CARDS_FAILURE,\n    payload: value\n  };\n};\n\nconst getResultRequest = () => {\n  return {\n    type: GET_RESULT_REQUEST\n  };\n};\n\nconst getResultSuccess = value => {\n  return {\n    type: GET_RESULT_SUCCESS,\n    payload: value\n  };\n};\n\nconst getResultFailure = value => {\n  return {\n    type: GET_RESULT_FAILURE,\n    payload: value\n  };\n};\n\nexport const getCards = () => {\n  return dispatch => {\n    dispatch(randomCardsRequest());\n    Axios.get('http://localhost:8080/api/cardgame/cards').then(response => {\n      dispatch(randomCardsSuccess(response.data));\n    }).catch(error => {\n      dispatch(randomCardsFailure(error));\n    });\n  };\n};\nexport const getResult = value => {\n  return dispatch => {\n    dispatch(getResultRequest());\n    Axios.post('http://localhost:8080/api/cardgame/result', value).then(response => {\n      dispatch(getResultSuccess(response.data));\n    }).catch(error => {\n      dispatch(getResultFailure(error));\n    });\n  };\n};\nexport const addImages = value => {\n  return {\n    type: ADD_IMAGES,\n    payload: value\n  };\n};\nexport const clearData = () => {\n  return {\n    type: CLEAR_DATA\n  };\n};","map":{"version":3,"sources":["C:\\Project\\cardgame-react\\src\\component\\card-table\\CardTableAction.js"],"names":["Axios","GET_CARDS_REQUEST","GET_CARDS_SUCCESS","GET_CARDS_FAILURE","GET_RESULT_REQUEST","GET_RESULT_SUCCESS","GET_RESULT_FAILURE","ADD_IMAGES","CLEAR_DATA","randomCardsRequest","type","randomCardsSuccess","value","payload","randomCardsFailure","getResultRequest","getResultSuccess","getResultFailure","getCards","dispatch","get","then","response","data","catch","error","getResult","post","addImages","clearData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;;AAEP,MAAMC,kBAAkB,GAAG,MAAM;AAC7B,SAAM;AACFC,IAAAA,IAAI,EAAET;AADJ,GAAN;AAGH,CAJD;;AAMA,MAAMU,kBAAkB,GAAIC,KAAD,IAAW;AAClC,SAAM;AACFF,IAAAA,IAAI,EAAER,iBADJ;AAEFW,IAAAA,OAAO,EAAED;AAFP,GAAN;AAIH,CALD;;AAOA,MAAME,kBAAkB,GAAIF,KAAD,IAAW;AAClC,SAAM;AACFF,IAAAA,IAAI,EAAEP,iBADJ;AAEFU,IAAAA,OAAO,EAAED;AAFP,GAAN;AAIH,CALD;;AAOA,MAAMG,gBAAgB,GAAG,MAAM;AAC3B,SAAM;AACFL,IAAAA,IAAI,EAAEN;AADJ,GAAN;AAGH,CAJD;;AAMA,MAAMY,gBAAgB,GAAIJ,KAAD,IAAW;AAChC,SAAM;AACFF,IAAAA,IAAI,EAAEL,kBADJ;AAEFQ,IAAAA,OAAO,EAAED;AAFP,GAAN;AAIH,CALD;;AAOA,MAAMK,gBAAgB,GAAIL,KAAD,IAAW;AAChC,SAAM;AACFF,IAAAA,IAAI,EAAEJ,kBADJ;AAEFO,IAAAA,OAAO,EAAED;AAFP,GAAN;AAIH,CALD;;AAOA,OAAO,MAAMM,QAAQ,GAAG,MAAM;AAC1B,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACV,kBAAkB,EAAnB,CAAR;AACAT,IAAAA,KAAK,CAACoB,GAAN,CAAU,0CAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAACR,kBAAkB,CAACW,QAAQ,CAACC,IAAV,CAAnB,CAAR;AACD,KAHH,EAICC,KAJD,CAIOC,KAAK,IAAI;AAChBN,MAAAA,QAAQ,CAACL,kBAAkB,CAACW,KAAD,CAAnB,CAAR;AACC,KAND;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMC,SAAS,GAAId,KAAD,IAAW;AAChC,SAAQO,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACAf,IAAAA,KAAK,CAAC2B,IAAN,CAAW,2CAAX,EAAwDf,KAAxD,EACCS,IADD,CACMC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAACH,gBAAgB,CAACM,QAAQ,CAACC,IAAV,CAAjB,CAAR;AACD,KAHH,EAICC,KAJD,CAIOC,KAAK,IAAI;AAChBN,MAAAA,QAAQ,CAACF,gBAAgB,CAACQ,KAAD,CAAjB,CAAR;AACC,KAND;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMG,SAAS,GAAIhB,KAAD,IAAW;AAChC,SAAM;AACFF,IAAAA,IAAI,EAAIH,UADN;AAEFM,IAAAA,OAAO,EAAGD;AAFR,GAAN;AAIH,CALM;AAOP,OAAO,MAAMiB,SAAS,GAAG,MAAM;AAC3B,SAAM;AACFnB,IAAAA,IAAI,EAAIF;AADN,GAAN;AAGH,CAJM","sourcesContent":["import Axios from \"axios\"\r\n\r\nexport const GET_CARDS_REQUEST = 'GET_CARDS_REQUEST'\r\nexport const GET_CARDS_SUCCESS = 'GET_CARDS_SUCCESS'\r\nexport const GET_CARDS_FAILURE = 'GET_CARDS_FAILURE'\r\nexport const GET_RESULT_REQUEST = 'GET_RESULT_REQUEST'\r\nexport const GET_RESULT_SUCCESS = 'GET_RESULT_SUCCESS'\r\nexport const GET_RESULT_FAILURE = 'GET_RESULT_FAILURE'\r\nexport const ADD_IMAGES = 'ADD_IMAGES'\r\nexport const CLEAR_DATA = 'CLEAR_DATA'\r\n\r\nconst randomCardsRequest = () => {\r\n    return{\r\n        type: GET_CARDS_REQUEST\r\n    }\r\n}\r\n\r\nconst randomCardsSuccess = (value) => {\r\n    return{\r\n        type: GET_CARDS_SUCCESS,\r\n        payload: value\r\n    }\r\n}\r\n\r\nconst randomCardsFailure = (value) => {\r\n    return{\r\n        type: GET_CARDS_FAILURE,\r\n        payload: value\r\n    }\r\n}\r\n\r\nconst getResultRequest = () => {\r\n    return{\r\n        type: GET_RESULT_REQUEST\r\n    }\r\n}\r\n\r\nconst getResultSuccess = (value) => {\r\n    return{\r\n        type: GET_RESULT_SUCCESS,\r\n        payload: value\r\n    }\r\n}\r\n\r\nconst getResultFailure = (value) => {\r\n    return{\r\n        type: GET_RESULT_FAILURE,\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const getCards = () => {\r\n    return (dispatch) => {\r\n        dispatch(randomCardsRequest());\r\n        Axios.get('http://localhost:8080/api/cardgame/cards')\r\n        .then(response => {\r\n            dispatch(randomCardsSuccess(response.data));\r\n          })\r\n        .catch(error => {\r\n        dispatch(randomCardsFailure(error));\r\n        });\r\n    }\r\n}\r\n\r\nexport const getResult = (value) => {\r\n    return (dispatch) => {\r\n        dispatch(getResultRequest());\r\n        Axios.post('http://localhost:8080/api/cardgame/result', value)\r\n        .then(response => {\r\n            dispatch(getResultSuccess(response.data));\r\n          })\r\n        .catch(error => {\r\n        dispatch(getResultFailure(error));\r\n        });\r\n    }\r\n}\r\n\r\nexport const addImages = (value) => {\r\n    return{\r\n        type :  ADD_IMAGES,\r\n        payload : value\r\n    }\r\n}\r\n\r\nexport const clearData = () => {\r\n    return{\r\n        type :  CLEAR_DATA\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}