{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\cardgame-react\\\\src\\\\component\\\\card-table\\\\CardTable.js\";\nimport React, { Component } from 'react';\nimport './CardTable.css';\nimport { Container, Card, Row, Col } from 'react-bootstrap';\nimport { getCards, getResult, addImages } from './CardTableAction';\nimport { connect } from 'react-redux';\nimport Store from '../redux/Store';\n\nvar CardBack = require('../cards-png/red_back.png');\n\nclass CardTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      check: false,\n      cardA1: '',\n      cardA2: '',\n      cardA3: '',\n      cardB1: '',\n      cardB2: '',\n      cardB3: '',\n      cardC1: '',\n      cardC2: '',\n      cardC3: '',\n      cardD1: '',\n      cardD2: '',\n      cardD3: '',\n      handRank: [],\n      winner: [],\n      winnerHand: [],\n      player1: 'Clarke',\n      player2: 'Murphy',\n      player3: 'Bellamy',\n      player4: 'Raven',\n      showCheck: true,\n      showResult: false,\n      showNewHand: false\n    };\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleResult = this.handleResult.bind(this);\n    this.createFrontCardDiv = this.createFrontCardDiv.bind(this);\n    this.createBackCardDiv = this.createBackCardDiv.bind(this);\n  }\n\n  componentDidMount() {\n    this.distributeCards();\n  }\n\n  handleResult() {\n    const cardList = Store.getState().cardTable.cards;\n    const card = {\n      cards: cardList\n    };\n    this.setState({\n      showCheck: false,\n      showResult: false,\n      showNewHand: true\n    });\n    this.props.getResult(card); // var orderA = this.arrangeOrder(\"A\")\n    // var orderB = this.arrangeOrder(\"B\")\n    // var orderC = this.arrangeOrder(\"C\")\n    // var orderD = this.arrangeOrder(\"D\")\n    // var handRanking = []\n    // handRanking.push(this.giveHandRanking(orderA))\n    // handRanking.push(this.giveHandRanking(orderB))\n    // handRanking.push(this.giveHandRanking(orderC))\n    // handRanking.push(this.giveHandRanking(orderD))\n    // var sortedRank = [...handRanking]\n    // sortedRank.sort((a, b) => a - b)\n    // var winArr = []\n    // var winHand = []\n    // if (sortedRank[0] === 1) {\n    //     var max = 2\n    //     if (parseInt(orderA[0]) >= max && handRanking[0] === 1) {\n    //         max = parseInt(orderA[0])\n    //         winArr = []\n    //         winArr = winArr.concat(\"A\")\n    //         winHand = []\n    //         winHand = winHand.concat(orderA)\n    //     }\n    //     if (parseInt(orderB[0]) >= max && handRanking[1] === 1) {\n    //         max = parseInt(orderB[0])\n    //         winArr = []\n    //         winArr = winArr.concat(\"B\")\n    //         winHand = []\n    //         winHand = winHand.concat(orderB)\n    //     }\n    //     if (parseInt(orderC[0]) >= max && handRanking[2] === 1) {\n    //         max = parseInt(orderC[0])\n    //         winArr = []\n    //         winArr = winArr.concat(\"C\")\n    //         winHand = []\n    //         winHand = winHand.concat(orderC)\n    //     }\n    //     if (parseInt(orderD[0]) >= max && handRanking[3] === 1) {\n    //         max = parseInt(orderD[0])\n    //         winArr = []\n    //         winArr = winArr.concat(\"D\")\n    //         winHand = []\n    //         winHand = winHand.concat(orderD)\n    //     }\n    // }\n    // else if (sortedRank[0] === 2) {\n    //     var max = 4\n    //     if (parseInt(orderA[0]) >= max && handRanking[0] === 2) {\n    //         max = parseInt(orderA[0])\n    //         winArr = []\n    //         winArr = winArr.concat(\"A\")\n    //         winHand = []\n    //         winHand = winHand.concat(orderA)\n    //     }\n    //     if (handRanking[1] === 2) {\n    //         if (parseInt(orderB[0]) > max) {\n    //             max = parseInt(orderB[0])\n    //             winArr = []\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = []\n    //             winHand = winHand.concat(orderB)\n    //         }\n    //         else if (parseInt(orderB[0]) === max) {\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = winHand.concat(orderB)\n    //         }\n    //     }\n    //     if (handRanking[2] === 2) {\n    //         if (parseInt(orderC[0]) > max) {\n    //             max = parseInt(orderC[0])\n    //             winArr = []\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = []\n    //             winHand = winHand.concat(orderC)\n    //         }\n    //         else if (parseInt(orderC[0]) === max) {\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = winHand.concat(orderC)\n    //         }\n    //     }\n    //     if (handRanking[3] === 2) {\n    //         if (parseInt(orderD[0]) >= max) {\n    //             max = parseInt(orderD[0])\n    //             winArr = []\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderD)\n    //         }\n    //         else if (parseInt(orderD[0]) === max) {\n    //             winArr = winArr.concat(\"D\")\n    //         winHand = winHand.concat(orderD)\n    //         }\n    //     }\n    // }\n    // else if (sortedRank[0] === 3) {\n    //     var max = 2\n    //     //last index of the order\n    //     var maxL = parseInt(orderA[2])\n    //     if (handRanking[0] === 3) {\n    //         if (parseInt(orderA[0]) >= max) {\n    //             max = parseInt(orderA[0])\n    //             winArr = []\n    //             winArr = winArr.concat(\"A\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderA)\n    //         }\n    //     }\n    //     if (handRanking[1] === 3) {\n    //         if (parseInt(orderB[0]) > max) {\n    //             max = parseInt(orderB[0])\n    //             maxL = parseInt(orderB[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //         else if (parseInt(orderB[0]) === max && parseInt(orderB[2]) === maxL) {\n    //             winArr = winArr.concat(\"B\")\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //         else if (parseInt(orderB[0]) === max && parseInt(orderB[2]) > maxL) {\n    //             maxL = parseInt(orderB[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //     }\n    //     if (handRanking[2] === 3) {\n    //         if (parseInt(orderC[0]) > max) {\n    //             max = parseInt(orderC[0])\n    //             maxL = parseInt(orderC[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //         else if (parseInt(orderC[0]) === max && parseInt(orderC[2]) === maxL) {\n    //             winArr = winArr.concat(\"C\")\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //         else if (parseInt(orderC[0]) === max && parseInt(orderC[2]) > maxL) {\n    //             maxL = parseInt(orderC[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //     }\n    //     if (handRanking[3] === 3) {\n    //         if (parseInt(orderD[0]) > max) {\n    //             max = parseInt(orderD[0])\n    //             maxL = parseInt(orderD[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderD)\n    //         }\n    //         else if (parseInt(orderD[0]) === max && parseInt(orderD[2]) === maxL) {\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = winHand.concat(orderA)\n    //         }\n    //         else if (parseInt(orderD[0]) === max && parseInt(orderD[2]) > maxL) {\n    //             maxL = parseInt(orderD[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderD)\n    //         }\n    //     }\n    // }\n    // else if (sortedRank[0] === 4) {\n    //     var max = 2\n    //     var maxM = parseInt(orderA[1])\n    //     var maxL = parseInt(orderA[2])\n    //     if (parseInt(orderA[0]) >= max && handRanking[0] === 4) {\n    //         max = parseInt(orderA[0])\n    //         winArr = []\n    //         winArr = winArr.concat(\"A\")\n    //         winHand = []\n    //         winHand = winHand.concat(orderA)\n    //     }\n    //     if (handRanking[1] === 4) {\n    //         if (parseInt(orderB[0]) > max) {\n    //             max = parseInt(orderB[0])\n    //             maxM = parseInt(orderB[1])\n    //             maxL = parseInt(orderB[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //         else if (parseInt(orderB[0]) === max && parseInt(orderB[1]) > maxM) {\n    //             max = parseInt(orderB[0])\n    //             maxM = parseInt(orderB[1])\n    //             maxL = parseInt(orderB[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //         else if (parseInt(orderB[0]) === max && parseInt(orderB[1]) === maxM && parseInt(orderB[2]) > maxL) {\n    //             max = parseInt(orderB[0])\n    //             maxM = parseInt(orderB[1])\n    //             maxL = parseInt(orderB[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"B\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //         else if (parseInt(orderB[0]) === max && parseInt(parseInt(orderB[1])) === maxM && parseInt(orderB[2]) === maxL) {\n    //             winArr = winArr.concat(\"B\")\n    //         winHand = winHand.concat(orderB)\n    //         }\n    //     }\n    //     if (handRanking[2] === 4) {\n    //         if (parseInt(orderC[0]) > max) {\n    //             max = parseInt(orderC[0])\n    //             maxM = parseInt(orderC[1])\n    //             maxL = parseInt(orderC[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //         else if (parseInt(orderC[0]) === max && parseInt(orderC[1]) > maxM) {\n    //             max = parseInt(orderC[0])\n    //             maxM = parseInt(orderC[1])\n    //             maxL = parseInt(orderC[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //         else if (parseInt(orderC[0]) === max && parseInt(orderC[1]) === maxM && parseInt(orderC[2]) > maxL) {\n    //             max = parseInt(orderC[0])\n    //             maxM = parseInt(orderC[1])\n    //             maxL = parseInt(orderC[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"C\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //         else if (parseInt(orderC[0]) === max && parseInt(orderC[1]) === maxM && parseInt(orderC[2]) === maxL) {\n    //             winArr = winArr.concat(\"C\")\n    //         winHand = winHand.concat(orderC)\n    //         }\n    //     }\n    //     if (handRanking[3] === 4) {\n    //         if (parseInt(orderD[0]) > max) {\n    //             max = parseInt(orderD[0])\n    //             maxM = parseInt(orderD[1])\n    //             maxL = parseInt(orderD[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = []\n    //         winHand = winHand.concat(orderD)\n    //         }\n    //         else if (parseInt(orderD[0]) === max && parseInt(orderD[1]) > maxM) {\n    //             max = parseInt(orderD[0])\n    //             maxM = parseInt(orderD[1])\n    //             maxL = parseInt(orderD[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = []\n    //             winHand = winHand.concat(orderD)\n    //         }\n    //         else if (parseInt(orderD[0]) === max && parseInt(orderD[1]) === maxM && parseInt(orderD[2]) > maxL) {\n    //             max = parseInt(orderD[0])\n    //             maxM = parseInt(orderD[1])\n    //             maxL = parseInt(orderD[2])\n    //             winArr = []\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = []\n    //             winHand = winHand.concat(orderD)\n    //         }\n    //         else if (parseInt(orderD[0]) === max && parseInt(orderD[1]) === maxM && parseInt(orderD[2]) === maxL) {\n    //             winArr = winArr.concat(\"D\")\n    //             winHand = winHand.concat(orderD)\n    //         }\n    //     }\n    // }\n    // this.setState({\n    //     winner: winArr, \n    //     winnerHand: winHand \n    // });\n  } // giving ranking for all hands( all-same: 1, sequence: 2, pair: 3, highest-card: 4)\n\n\n  giveHandRanking(order) {\n    if (order[0] === order[1] && order[0] === order[2]) {\n      return 1;\n    } else if (order[0] - 1 === order[1] && order[1] - 1 === order[2]) {\n      return 2;\n    } else if (order[0] === order[1] || order[0] === order[2] || order[1] === order[2]) {\n      return 3;\n    } else {\n      return 4;\n    }\n  }\n\n  arrangeOrder(char) {\n    var order = [];\n    var card1 = char === 'A' ? this.state.cardA1 : char === 'B' ? this.state.cardB1 : char === 'C' ? this.state.cardC1 : this.state.cardD1;\n    var card2 = char === 'A' ? this.state.cardA2 : char === 'B' ? this.state.cardB2 : char === 'C' ? this.state.cardC2 : this.state.cardD2;\n    var card3 = char === 'A' ? this.state.cardA3 : char === 'B' ? this.state.cardB3 : char === 'C' ? this.state.cardC3 : this.state.cardD3;\n    order.push(parseInt(card1), parseInt(card2), parseInt(card3));\n    order.sort((a, b) => b - a);\n\n    if (order[0] !== order[1] && order[1] === order[2]) {\n      var card = order.splice(0, 1)[0];\n      order.splice(2, 0, card);\n    }\n\n    return order;\n  }\n\n  getCardValue(card) {\n    let cardMap = new Map([['A', 14], ['K', 13], ['Q', 12], ['J', 11], ['10', 10], ['9', 9], ['8', 8], ['7', 7], ['6', 6], ['5', 5], ['4', 4], ['3', 3], ['2', 2], ['1', 1]]);\n    var cardValue = 0;\n\n    if (!card.includes('10')) {\n      cardValue = cardMap.get(card[0]);\n    } else {\n      cardValue = cardMap.get(card.substring(0, 2));\n    }\n\n    return cardValue;\n  } //changing the Ace value based on perference with highest possibility. eg (A,2,3 => Ace: 1 => 1,2,3) (otherwise => Ace: 14)\n\n\n  checkAcePreference() {\n    //seat 1\n    if (this.state.cardA1 === 14 && (this.state.cardA2 === 2 && this.state.cardA3 === 3 || this.state.cardA2 === 3 && this.state.cardA3 === 2)) {\n      this.setState({\n        cardA1: 1\n      });\n    } else if (this.state.cardA2 === 14 && (this.state.cardA1 === 2 && this.state.cardA3 === 3 || this.state.cardA1 === 3 && this.state.cardA3 === 2)) {\n      this.setState({\n        cardA2: 1\n      });\n    } else if (this.state.cardA3 === 14 && (this.state.cardA1 === 2 && this.state.cardA2 === 3 || this.state.cardA1 === 3 && this.state.cardA2 === 2)) {\n      this.setState({\n        cardA3: 1\n      });\n    } //seat 2\n\n\n    if (this.state.cardB1 === 14 && (this.state.cardB2 === 2 && this.state.cardB3 === 3 || this.state.cardB2 === 3 && this.state.cardB3 === 2)) {\n      this.setState({\n        cardB1: 1\n      });\n    } else if (this.state.cardB2 === 14 && (this.state.cardB1 === 2 && this.state.cardB3 === 3 || this.state.cardB1 === 3 && this.state.cardB3 === 2)) {\n      this.setState({\n        cardB2: 1\n      });\n    } else if (this.state.cardB3 === 14 && (this.state.cardB1 === 2 && this.state.cardB2 === 3 || this.state.cardB1 === 3 && this.state.cardB2 === 2)) {\n      this.setState({\n        cardB3: 1\n      });\n    } //seat 3\n\n\n    if (this.state.cardC1 === 14 && (this.state.cardC2 === 2 && this.state.cardC3 === 3 || this.state.cardC2 === 3 && this.state.cardC3 === 2)) {\n      this.setState({\n        cardC1: 1\n      });\n    } else if (this.state.cardC2 === 14 && (this.state.cardC1 === 2 && this.state.cardC3 === 3 || this.state.cardC1 === 3 && this.state.cardC3 === 2)) {\n      this.setState({\n        cardC2: 1\n      });\n    } else if (this.state.cardC3 === 14 && (this.state.cardC1 === 2 && this.state.cardC2 === 3 || this.state.cardC1 === 3 && this.state.cardC2 === 2)) {\n      this.setState({\n        cardC3: 1\n      });\n    } //seat 4\n\n\n    if (this.state.cardD1 === 14 && (this.state.cardD2 === 2 && this.state.cardD3 === 3 || this.state.cardD2 === 3 && this.state.cardD3 === 2)) {\n      this.setState({\n        cardD1: 1\n      });\n    } else if (this.state.cardD2 === 14 && (this.state.cardD1 === 2 && this.state.cardD3 === 3 || this.state.cardD1 === 3 && this.state.cardD3 === 2)) {\n      this.setState({\n        cardD2: 1\n      });\n    } else if (this.state.cardD3 === 14 && (this.state.cardD1 === 2 && this.state.cardD2 === 3 || this.state.cardD1 === 3 && this.state.cardD2 === 2)) {\n      this.setState({\n        cardD3: 1\n      });\n    }\n  }\n\n  distributeCards() {\n    this.props.getCards();\n  }\n\n  handleCheck() {\n    const cards = this.props.cardTable.cards;\n    var imageList = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      imageList.push(require(\"../cards-png/\" + cards[i] + \".png\"));\n    }\n\n    this.props.addImages(imageList);\n    this.setState({\n      check: true,\n      showResult: true,\n      showCheck: false,\n      showNewHand: false\n    });\n  }\n\n  createFrontCardDiv(images, index) {\n    var divFrontCard = [];\n\n    for (var i = index; i < index + 3; i++) {\n      divFrontCard.push(React.createElement(Card, {\n        style: {\n          width: '8rem',\n          height: '12rem',\n          border: '2px solid rgb(221, 221, 224)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        src: images[i],\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      })));\n    }\n\n    return divFrontCard;\n  }\n\n  createBackCardDiv() {\n    var divBackCard = [];\n\n    for (var i = 0; i < 3; i++) {\n      divBackCard.push(React.createElement(Card, {\n        style: {\n          width: '8rem',\n          height: '12rem',\n          border: '2px solid rgb(221, 221, 224)',\n          marginLeft: \"-6rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        src: CardBack,\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      })));\n    }\n\n    return divBackCard;\n  }\n\n  handleReset() {\n    this.distributeCards();\n    this.setState({\n      check: false,\n      showResult: false,\n      showCheck: true,\n      showNewHand: false\n    });\n  }\n\n  render() {\n    const _this$props$cardTable = this.props.cardTable,\n          images = _this$props$cardTable.images,\n          cards = _this$props$cardTable.cards,\n          winners = _this$props$cardTable.winners;\n    return React.createElement(Container, {\n      style: {\n        alignItems: \"center\",\n        background: \"#777\"\n      },\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        marginLeft: \"100px\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"p\", {\n      style: {\n        marginLeft: \"-20rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, this.state.player1, \"'s Seat\"), this.state.check && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, this.state.player1, \"'s Seat\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }), React.createElement(Row, {\n      style: {\n        marginLeft: \"100px\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    }), React.createElement(Col, {\n      sm: 4,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, this.createBackCardDiv()), this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }, this.createFrontCardDiv(images, 0))), React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, winners.length > 0 && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, winners[0].id === 1 ? this.state.player1 : winners[0].id === \"B\" ? this.state.player2 : winners[0].id === \"C\" ? this.state.player3 : this.state.player4, \" \\xA0 Wins\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \"with hand : \", winners[0].hand[0], \" \", winners[0].hand[1], \" \", winners[0].hand[2])))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }), React.createElement(Row, {\n      style: {\n        marginLeft: \"100px\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"p\", {\n      style: {\n        marginLeft: \"-20rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, this.state.player2, \"'s Seat\"), this.state.check && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, this.state.player2, \"'s Seat\")), React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }), React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"p\", {\n      style: {\n        marginLeft: \"-20rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, this.state.player3, \"'s Seat\"), this.state.check && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, this.state.player3, \"'s Seat\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }), React.createElement(Row, {\n      style: {\n        marginLeft: \"100px\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, this.createBackCardDiv()), this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, this.createFrontCardDiv(images, 3))), React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }), React.createElement(Col, {\n      sm: 4,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, this.createBackCardDiv()), this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, this.createFrontCardDiv(images, 6)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), React.createElement(Row, {\n      style: {\n        marginLeft: \"100px\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }), React.createElement(Col, {\n      sm: 4,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, this.createBackCardDiv()), this.state.check && React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, this.createFrontCardDiv(images, 9))), React.createElement(Col, {\n      sm: 4,\n      style: {\n        textAlign: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn\",\n      onClick: () => this.handleCheck(),\n      disabled: !this.state.showCheck,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, \"Check\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn1\",\n      onClick: () => this.handleResult(),\n      disabled: !this.state.showResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, \"Result\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn1\",\n      onClick: () => this.handleReset(),\n      disabled: !this.state.showNewHand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, \"New Hand\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), React.createElement(Row, {\n      style: {\n        marginLeft: \"100px\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, !this.state.check && React.createElement(\"p\", {\n      style: {\n        marginLeft: \"-20rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, this.state.player4, \"'s Seat\"), this.state.check && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, this.state.player4, \"'s Seat\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cardTable: state.cardTable\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCards: () => dispatch(getCards()),\n    getResult: cardList => dispatch(getResult(cardList)),\n    addImages: imageList => dispatch(addImages(imageList))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardTable);","map":{"version":3,"sources":["C:\\Project\\cardgame-react\\src\\component\\card-table\\CardTable.js"],"names":["React","Component","Container","Card","Row","Col","getCards","getResult","addImages","connect","Store","CardBack","require","CardTable","constructor","props","state","check","cardA1","cardA2","cardA3","cardB1","cardB2","cardB3","cardC1","cardC2","cardC3","cardD1","cardD2","cardD3","handRank","winner","winnerHand","player1","player2","player3","player4","showCheck","showResult","showNewHand","handleCheck","bind","handleReset","handleResult","createFrontCardDiv","createBackCardDiv","componentDidMount","distributeCards","cardList","getState","cardTable","cards","card","setState","giveHandRanking","order","arrangeOrder","char","card1","card2","card3","push","parseInt","sort","a","b","splice","getCardValue","cardMap","Map","cardValue","includes","get","substring","checkAcePreference","imageList","i","length","images","index","divFrontCard","width","height","border","divBackCard","marginLeft","render","winners","alignItems","background","textAlign","id","hand","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './CardTable.css'\r\nimport { Container, Card, Row, Col } from 'react-bootstrap'\r\nimport { getCards, getResult, addImages } from './CardTableAction';\r\nimport { connect } from 'react-redux';\r\nimport Store from '../redux/Store';\r\nvar CardBack = require('../cards-png/red_back.png');\r\n\r\n\r\nclass CardTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            check: false,\r\n            cardA1: '',\r\n            cardA2: '',\r\n            cardA3: '',\r\n            cardB1: '',\r\n            cardB2: '',\r\n            cardB3: '',\r\n            cardC1: '',\r\n            cardC2: '',\r\n            cardC3: '',\r\n            cardD1: '',\r\n            cardD2: '',\r\n            cardD3: '',\r\n            handRank: [],\r\n            winner: [],\r\n            winnerHand: [],\r\n            player1: 'Clarke',\r\n            player2: 'Murphy',\r\n            player3: 'Bellamy',\r\n            player4: 'Raven',\r\n            showCheck: true,\r\n            showResult: false,\r\n            showNewHand: false\r\n        };\r\n        \r\n        this.handleCheck = this.handleCheck.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.handleResult = this.handleResult.bind(this);\r\n        this.createFrontCardDiv = this.createFrontCardDiv.bind(this);\r\n        this.createBackCardDiv = this.createBackCardDiv.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.distributeCards();\r\n    }\r\n\r\n    handleResult() {\r\n        const cardList = Store.getState().cardTable.cards\r\n        const card = {\r\n            cards : cardList\r\n        }\r\n        this.setState({\r\n            showCheck: false,\r\n            showResult: false,\r\n            showNewHand: true\r\n        })\r\n        this.props.getResult(card)\r\n        // var orderA = this.arrangeOrder(\"A\")\r\n        // var orderB = this.arrangeOrder(\"B\")\r\n        // var orderC = this.arrangeOrder(\"C\")\r\n        // var orderD = this.arrangeOrder(\"D\")\r\n        // var handRanking = []\r\n        // handRanking.push(this.giveHandRanking(orderA))\r\n        // handRanking.push(this.giveHandRanking(orderB))\r\n        // handRanking.push(this.giveHandRanking(orderC))\r\n        // handRanking.push(this.giveHandRanking(orderD))\r\n        // var sortedRank = [...handRanking]\r\n        // sortedRank.sort((a, b) => a - b)\r\n\r\n        // var winArr = []\r\n        // var winHand = []\r\n        // if (sortedRank[0] === 1) {\r\n        //     var max = 2\r\n        //     if (parseInt(orderA[0]) >= max && handRanking[0] === 1) {\r\n        //         max = parseInt(orderA[0])\r\n        //         winArr = []\r\n        //         winArr = winArr.concat(\"A\")\r\n        //         winHand = []\r\n        //         winHand = winHand.concat(orderA)\r\n        //     }\r\n        //     if (parseInt(orderB[0]) >= max && handRanking[1] === 1) {\r\n        //         max = parseInt(orderB[0])\r\n        //         winArr = []\r\n        //         winArr = winArr.concat(\"B\")\r\n        //         winHand = []\r\n        //         winHand = winHand.concat(orderB)\r\n        //     }\r\n        //     if (parseInt(orderC[0]) >= max && handRanking[2] === 1) {\r\n        //         max = parseInt(orderC[0])\r\n        //         winArr = []\r\n        //         winArr = winArr.concat(\"C\")\r\n        //         winHand = []\r\n        //         winHand = winHand.concat(orderC)\r\n        //     }\r\n        //     if (parseInt(orderD[0]) >= max && handRanking[3] === 1) {\r\n        //         max = parseInt(orderD[0])\r\n        //         winArr = []\r\n        //         winArr = winArr.concat(\"D\")\r\n        //         winHand = []\r\n        //         winHand = winHand.concat(orderD)\r\n        //     }\r\n        // }\r\n        // else if (sortedRank[0] === 2) {\r\n\r\n        //     var max = 4\r\n        //     if (parseInt(orderA[0]) >= max && handRanking[0] === 2) {\r\n        //         max = parseInt(orderA[0])\r\n        //         winArr = []\r\n        //         winArr = winArr.concat(\"A\")\r\n        //         winHand = []\r\n        //         winHand = winHand.concat(orderA)\r\n        //     }\r\n\r\n        //     if (handRanking[1] === 2) {\r\n        //         if (parseInt(orderB[0]) > max) {\r\n        //             max = parseInt(orderB[0])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = []\r\n        //             winHand = winHand.concat(orderB)\r\n        //         }\r\n        //         else if (parseInt(orderB[0]) === max) {\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = winHand.concat(orderB)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[2] === 2) {\r\n        //         if (parseInt(orderC[0]) > max) {\r\n        //             max = parseInt(orderC[0])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = []\r\n        //             winHand = winHand.concat(orderC)\r\n        //         }\r\n        //         else if (parseInt(orderC[0]) === max) {\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = winHand.concat(orderC)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[3] === 2) {\r\n        //         if (parseInt(orderD[0]) >= max) {\r\n        //             max = parseInt(orderD[0])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderD)\r\n        //         }\r\n        //         else if (parseInt(orderD[0]) === max) {\r\n        //             winArr = winArr.concat(\"D\")\r\n        //         winHand = winHand.concat(orderD)\r\n        //         }\r\n        //     }\r\n        // }\r\n        // else if (sortedRank[0] === 3) {\r\n        //     var max = 2\r\n        //     //last index of the order\r\n        //     var maxL = parseInt(orderA[2])\r\n        //     if (handRanking[0] === 3) {\r\n        //         if (parseInt(orderA[0]) >= max) {\r\n        //             max = parseInt(orderA[0])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"A\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderA)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[1] === 3) {\r\n        //         if (parseInt(orderB[0]) > max) {\r\n        //             max = parseInt(orderB[0])\r\n        //             maxL = parseInt(orderB[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //         else if (parseInt(orderB[0]) === max && parseInt(orderB[2]) === maxL) {\r\n        //             winArr = winArr.concat(\"B\")\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //         else if (parseInt(orderB[0]) === max && parseInt(orderB[2]) > maxL) {\r\n        //             maxL = parseInt(orderB[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[2] === 3) {\r\n        //         if (parseInt(orderC[0]) > max) {\r\n        //             max = parseInt(orderC[0])\r\n        //             maxL = parseInt(orderC[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //         else if (parseInt(orderC[0]) === max && parseInt(orderC[2]) === maxL) {\r\n        //             winArr = winArr.concat(\"C\")\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //         else if (parseInt(orderC[0]) === max && parseInt(orderC[2]) > maxL) {\r\n        //             maxL = parseInt(orderC[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[3] === 3) {\r\n        //         if (parseInt(orderD[0]) > max) {\r\n        //             max = parseInt(orderD[0])\r\n        //             maxL = parseInt(orderD[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderD)\r\n        //         }\r\n        //         else if (parseInt(orderD[0]) === max && parseInt(orderD[2]) === maxL) {\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = winHand.concat(orderA)\r\n        //         }\r\n        //         else if (parseInt(orderD[0]) === max && parseInt(orderD[2]) > maxL) {\r\n        //             maxL = parseInt(orderD[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderD)\r\n        //         }\r\n        //     }\r\n        // }\r\n        // else if (sortedRank[0] === 4) {\r\n\r\n        //     var max = 2\r\n        //     var maxM = parseInt(orderA[1])\r\n        //     var maxL = parseInt(orderA[2])\r\n        //     if (parseInt(orderA[0]) >= max && handRanking[0] === 4) {\r\n        //         max = parseInt(orderA[0])\r\n        //         winArr = []\r\n        //         winArr = winArr.concat(\"A\")\r\n        //         winHand = []\r\n        //         winHand = winHand.concat(orderA)\r\n        //     }\r\n\r\n        //     if (handRanking[1] === 4) {\r\n        //         if (parseInt(orderB[0]) > max) {\r\n        //             max = parseInt(orderB[0])\r\n        //             maxM = parseInt(orderB[1])\r\n        //             maxL = parseInt(orderB[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //         else if (parseInt(orderB[0]) === max && parseInt(orderB[1]) > maxM) {\r\n        //             max = parseInt(orderB[0])\r\n        //             maxM = parseInt(orderB[1])\r\n        //             maxL = parseInt(orderB[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //         else if (parseInt(orderB[0]) === max && parseInt(orderB[1]) === maxM && parseInt(orderB[2]) > maxL) {\r\n        //             max = parseInt(orderB[0])\r\n        //             maxM = parseInt(orderB[1])\r\n        //             maxL = parseInt(orderB[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"B\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //         else if (parseInt(orderB[0]) === max && parseInt(parseInt(orderB[1])) === maxM && parseInt(orderB[2]) === maxL) {\r\n        //             winArr = winArr.concat(\"B\")\r\n        //         winHand = winHand.concat(orderB)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[2] === 4) {\r\n        //         if (parseInt(orderC[0]) > max) {\r\n        //             max = parseInt(orderC[0])\r\n        //             maxM = parseInt(orderC[1])\r\n        //             maxL = parseInt(orderC[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //         else if (parseInt(orderC[0]) === max && parseInt(orderC[1]) > maxM) {\r\n        //             max = parseInt(orderC[0])\r\n        //             maxM = parseInt(orderC[1])\r\n        //             maxL = parseInt(orderC[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //         else if (parseInt(orderC[0]) === max && parseInt(orderC[1]) === maxM && parseInt(orderC[2]) > maxL) {\r\n        //             max = parseInt(orderC[0])\r\n        //             maxM = parseInt(orderC[1])\r\n        //             maxL = parseInt(orderC[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"C\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //         else if (parseInt(orderC[0]) === max && parseInt(orderC[1]) === maxM && parseInt(orderC[2]) === maxL) {\r\n        //             winArr = winArr.concat(\"C\")\r\n        //         winHand = winHand.concat(orderC)\r\n        //         }\r\n        //     }\r\n\r\n        //     if (handRanking[3] === 4) {\r\n        //         if (parseInt(orderD[0]) > max) {\r\n        //             max = parseInt(orderD[0])\r\n        //             maxM = parseInt(orderD[1])\r\n        //             maxL = parseInt(orderD[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = []\r\n        //         winHand = winHand.concat(orderD)\r\n        //         }\r\n        //         else if (parseInt(orderD[0]) === max && parseInt(orderD[1]) > maxM) {\r\n        //             max = parseInt(orderD[0])\r\n        //             maxM = parseInt(orderD[1])\r\n        //             maxL = parseInt(orderD[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = []\r\n        //             winHand = winHand.concat(orderD)\r\n        //         }\r\n        //         else if (parseInt(orderD[0]) === max && parseInt(orderD[1]) === maxM && parseInt(orderD[2]) > maxL) {\r\n        //             max = parseInt(orderD[0])\r\n        //             maxM = parseInt(orderD[1])\r\n        //             maxL = parseInt(orderD[2])\r\n        //             winArr = []\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = []\r\n        //             winHand = winHand.concat(orderD)\r\n        //         }\r\n        //         else if (parseInt(orderD[0]) === max && parseInt(orderD[1]) === maxM && parseInt(orderD[2]) === maxL) {\r\n        //             winArr = winArr.concat(\"D\")\r\n        //             winHand = winHand.concat(orderD)\r\n        //         }\r\n        //     }\r\n        // }\r\n        // this.setState({\r\n        //     winner: winArr, \r\n        //     winnerHand: winHand \r\n        // });\r\n    }\r\n\r\n    // giving ranking for all hands( all-same: 1, sequence: 2, pair: 3, highest-card: 4)\r\n    giveHandRanking(order) {\r\n        if ((order[0] === order[1]) && (order[0] === order[2])) {\r\n            return 1\r\n        }\r\n        else if (order[0] - 1 === order[1] && order[1] - 1 === order[2]) {\r\n            return 2\r\n        }\r\n        else if ((order[0] === order[1]) || (order[0] === order[2]) || (order[1] === order[2])) {\r\n            return 3\r\n        }\r\n        else {\r\n            return 4\r\n        }\r\n    }\r\n\r\n    arrangeOrder(char) {\r\n        var order = []\r\n        var card1 = char === 'A' ? this.state.cardA1 : char === 'B' ? this.state.cardB1 : char === 'C' ? this.state.cardC1 : this.state.cardD1\r\n        var card2 = char === 'A' ? this.state.cardA2 : char === 'B' ? this.state.cardB2 : char === 'C' ? this.state.cardC2 : this.state.cardD2\r\n        var card3 = char === 'A' ? this.state.cardA3 : char === 'B' ? this.state.cardB3 : char === 'C' ? this.state.cardC3 : this.state.cardD3\r\n        order.push(parseInt(card1), parseInt(card2), parseInt(card3))\r\n        order.sort((a, b) => b - a)\r\n        if ((order[0] !== order[1]) && (order[1] === order[2])) {\r\n            var card = order.splice(0, 1)[0]\r\n            order.splice(2, 0, card)\r\n        }\r\n        return order;\r\n    }\r\n\r\n    getCardValue(card) {\r\n        let cardMap = new Map([['A', 14], ['K', 13], ['Q', 12], ['J', 11], ['10', 10], ['9', 9], ['8', 8], ['7', 7], ['6', 6], ['5', 5], ['4', 4], ['3', 3], ['2', 2], ['1', 1]]);\r\n        var cardValue = 0;\r\n        if (!card.includes('10')) {\r\n            cardValue = cardMap.get(card[0])\r\n        }\r\n        else {\r\n            cardValue = cardMap.get(card.substring(0, 2))\r\n        }\r\n        return cardValue;\r\n    }\r\n\r\n    //changing the Ace value based on perference with highest possibility. eg (A,2,3 => Ace: 1 => 1,2,3) (otherwise => Ace: 14)\r\n    checkAcePreference() {\r\n\r\n        //seat 1\r\n        if (this.state.cardA1 === 14 && ((this.state.cardA2 === 2 && this.state.cardA3 === 3) || (this.state.cardA2 === 3 && this.state.cardA3 === 2))) {\r\n            this.setState({\r\n                cardA1: 1\r\n            })\r\n        }\r\n        else if (this.state.cardA2 === 14 && ((this.state.cardA1 === 2 && this.state.cardA3 === 3) || (this.state.cardA1 === 3 && this.state.cardA3 === 2))) {\r\n            this.setState({\r\n                cardA2: 1\r\n            })\r\n        }\r\n        else if (this.state.cardA3 === 14 && ((this.state.cardA1 === 2 && this.state.cardA2 === 3) || (this.state.cardA1 === 3 && this.state.cardA2 === 2))) {\r\n            this.setState({\r\n                cardA3: 1\r\n            })\r\n        }\r\n\r\n        //seat 2\r\n        if (this.state.cardB1 === 14 && ((this.state.cardB2 === 2 && this.state.cardB3 === 3) || (this.state.cardB2 === 3 && this.state.cardB3 === 2))) {\r\n            this.setState({\r\n                cardB1: 1\r\n            })\r\n        }\r\n        else if (this.state.cardB2 === 14 && ((this.state.cardB1 === 2 && this.state.cardB3 === 3) || (this.state.cardB1 === 3 && this.state.cardB3 === 2))) {\r\n            this.setState({\r\n                cardB2: 1\r\n            })\r\n        }\r\n        else if (this.state.cardB3 === 14 && ((this.state.cardB1 === 2 && this.state.cardB2 === 3) || (this.state.cardB1 === 3 && this.state.cardB2 === 2))) {\r\n            this.setState({\r\n                cardB3: 1\r\n            })\r\n        }\r\n\r\n        //seat 3\r\n        if (this.state.cardC1 === 14 && ((this.state.cardC2 === 2 && this.state.cardC3 === 3) || (this.state.cardC2 === 3 && this.state.cardC3 === 2))) {\r\n            this.setState({\r\n                cardC1: 1\r\n            })\r\n        }\r\n        else if (this.state.cardC2 === 14 && ((this.state.cardC1 === 2 && this.state.cardC3 === 3) || (this.state.cardC1 === 3 && this.state.cardC3 === 2))) {\r\n            this.setState({\r\n                cardC2: 1\r\n            })\r\n        }\r\n        else if (this.state.cardC3 === 14 && ((this.state.cardC1 === 2 && this.state.cardC2 === 3) || (this.state.cardC1 === 3 && this.state.cardC2 === 2))) {\r\n            this.setState({\r\n                cardC3: 1\r\n            })\r\n        }\r\n\r\n        //seat 4\r\n        if (this.state.cardD1 === 14 && ((this.state.cardD2 === 2 && this.state.cardD3 === 3) || (this.state.cardD2 === 3 && this.state.cardD3 === 2))) {\r\n            this.setState({\r\n                cardD1: 1\r\n            })\r\n        }\r\n        else if (this.state.cardD2 === 14 && ((this.state.cardD1 === 2 && this.state.cardD3 === 3) || (this.state.cardD1 === 3 && this.state.cardD3 === 2))) {\r\n            this.setState({\r\n                cardD2: 1\r\n            })\r\n        }\r\n        else if (this.state.cardD3 === 14 && ((this.state.cardD1 === 2 && this.state.cardD2 === 3) || (this.state.cardD1 === 3 && this.state.cardD2 === 2))) {\r\n            this.setState({\r\n                cardD3: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    distributeCards() {\r\n        this.props.getCards(); \r\n    }\r\n\r\n    handleCheck() {\r\n        const {cards} = this.props.cardTable\r\n        var imageList = []\r\n        for(var i = 0; i < cards.length; i++){\r\n            imageList.push(require(\"../cards-png/\" + cards[i] + \".png\"))\r\n        }\r\n        this.props.addImages(imageList)\r\n\r\n        this.setState({\r\n            check: true,\r\n            showResult: true,\r\n            showCheck: false,\r\n            showNewHand: false,\r\n        })\r\n    }\r\n\r\n    createFrontCardDiv(images, index) {\r\n        var divFrontCard = []\r\n        for(var i = index; i < index+3; i++){\r\n            divFrontCard.push(\r\n                <Card style={{ width: '8rem', height: '12rem', border: '2px solid rgb(221, 221, 224)' }}>\r\n                    <Card.Img src={images[i]} style={{ width: '100%', height: '100%' }} ></Card.Img>\r\n                </Card>\r\n            )\r\n        }\r\n        return divFrontCard\r\n    }\r\n\r\n    createBackCardDiv(){\r\n        var divBackCard = []\r\n        for(var i = 0; i < 3; i++){\r\n            divBackCard.push(\r\n                <Card style={{ width: '8rem', height: '12rem', border: '2px solid rgb(221, 221, 224)', marginLeft: \"-6rem\" }}>\r\n                    <Card.Img src={CardBack} style={{ width: '100%', height: '100%' }} ></Card.Img>\r\n                </Card>\r\n            )\r\n        }\r\n        return divBackCard\r\n    }\r\n\r\n    handleReset() {\r\n        this.distributeCards()\r\n        this.setState({\r\n            check: false,\r\n            showResult: false,\r\n            showCheck: true,\r\n            showNewHand: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {images, cards, winners} = this.props.cardTable\r\n        return (\r\n            <Container style={{ alignItems: \"center\", background: \"#777\" }} fluid>\r\n                <div className=\"card-board\">\r\n                    <Row style={{ marginLeft: \"100px\", textAlign: \"center\" }}>\r\n                        <Col sm={12}>\r\n                        {!this.state.check &&( <p style={{marginLeft: \"-20rem\"}}>{this.state.player1}'s Seat</p> )}\r\n                        {this.state.check &&( <p>{this.state.player1}'s Seat</p> )}\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={{ marginLeft: \"100px\", textAlign: \"center\"}}>\r\n                        <Col sm={4}>\r\n                        </Col>\r\n                        <Col sm={4} style={{ textAlign: \"center\" }}>\r\n                            {!this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createBackCardDiv()}\r\n                                </div>\r\n                            )}\r\n                            {this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createFrontCardDiv(images,0)}\r\n                                </div>\r\n                            )}\r\n\r\n                        </Col>\r\n                        <Col sm={4}>\r\n                            {winners.length > 0 && (\r\n                                <div>\r\n                                <h3>{winners[0].id === 1 ? this.state.player1 : winners[0].id === \"B\" ? this.state.player2 : winners[0].id === \"C\" ? this.state.player3 : this.state.player4 } &nbsp; Wins</h3>\r\n                                <p>with hand : {winners[0].hand[0]} {winners[0].hand[1]} {winners[0].hand[2]}</p>\r\n                                </div>\r\n\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={{ marginLeft: \"100px\", textAlign: \"center\" }}>\r\n                        <Col sm={4}>\r\n                        {!this.state.check &&( <p style={{marginLeft: \"-20rem\"}}>{this.state.player2}'s Seat</p> )}\r\n                        {this.state.check &&( <p>{this.state.player2}'s Seat</p> )}\r\n                        </Col>\r\n                        <Col sm={4}>\r\n                        </Col>\r\n                        <Col sm={4}>\r\n                        {!this.state.check &&( <p style={{marginLeft: \"-20rem\"}}>{this.state.player3}'s Seat</p> )}\r\n                        {this.state.check &&( <p>{this.state.player3}'s Seat</p> )}\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={{ marginLeft: \"100px\" , textAlign: \"center\" }}>\r\n                        <Col sm={4} style={{ textAlign: \"center\" }}>\r\n                            {!this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createBackCardDiv()}\r\n                                </div>\r\n                            )}\r\n                            {this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createFrontCardDiv(images,3)}\r\n                                </div>\r\n                            )}\r\n                        </Col>\r\n                        <Col sm={4}>\r\n                        </Col>\r\n                        <Col sm={4} style={{ textAlign: \"center\" }}>\r\n                            {!this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createBackCardDiv()}\r\n                                </div>\r\n                            )}\r\n                            {this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createFrontCardDiv(images,6)}\r\n                                </div>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={{ marginLeft: \"100px\" , textAlign: \"center\" }}>\r\n                        <Col sm={4}>\r\n                        </Col>\r\n                        <Col sm={4} style={{ textAlign: \"center\" }}>\r\n                            {!this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createBackCardDiv()}\r\n                                </div>\r\n                            )}\r\n                            {this.state.check && (\r\n                                <div className=\"cards\">\r\n                                    {this.createFrontCardDiv(images,9)}\r\n                                </div>\r\n                            )}\r\n                        </Col>\r\n                        <Col sm={4} style={{textAlign: \"right\"}}>\r\n                            <button type=\"button\" className=\"btn\" onClick={() => this.handleCheck()} disabled={!this.state.showCheck}>Check</button>\r\n                            <br />\r\n                            <button type=\"button\" className=\"btn1\" onClick={() => this.handleResult()} disabled={!this.state.showResult}>Result</button>\r\n                            <br />\r\n                            <button type=\"button\" className=\"btn1\" onClick={() => this.handleReset()} disabled={!this.state.showNewHand}>New Hand</button>\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <Row style={{ marginLeft: \"100px\", textAlign: \"center\" }}>\r\n                        <Col sm={12}>\r\n                        {!this.state.check &&( <p style={{marginLeft: \"-20rem\"}}>{this.state.player4}'s Seat</p> )}\r\n                        {this.state.check &&( <p>{this.state.player4}'s Seat</p> )}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Container >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        cardTable : state.cardTable\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        getCards: () => dispatch(getCards()),\r\n        getResult: (cardList) => dispatch(getResult(cardList)),\r\n        addImages: (imageList) => dispatch(addImages(imageList))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardTable)\r\n"]},"metadata":{},"sourceType":"module"}